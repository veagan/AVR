
Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a32  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000439  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dd  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00001e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <button_ini>:
#include "button.h"



void button_ini(Button_typedef *button, volatile uint8_t *port, uint8_t pin_number){
  90:	fc 01       	movw	r30, r24
	button->ddr = port;
  92:	71 83       	std	Z+1, r23	; 0x01
  94:	60 83       	st	Z, r22
	button->port = button->ddr + 1;
  96:	cb 01       	movw	r24, r22
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	93 83       	std	Z+3, r25	; 0x03
  9c:	82 83       	std	Z+2, r24	; 0x02
	button->pin = button->ddr - 1;
  9e:	02 97       	sbiw	r24, 0x02	; 2
  a0:	95 83       	std	Z+5, r25	; 0x05
  a2:	84 83       	std	Z+4, r24	; 0x04
	button->pin_num = pin_number;
  a4:	46 83       	std	Z+6, r20	; 0x06
	*(button->ddr)&=~(1<<button->pin_num);
  a6:	db 01       	movw	r26, r22
  a8:	3c 91       	ld	r19, X
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	dc 01       	movw	r26, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <button_ini+0x26>
  b2:	aa 0f       	add	r26, r26
  b4:	bb 1f       	adc	r27, r27
  b6:	4a 95       	dec	r20
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <button_ini+0x22>
  ba:	2a 2f       	mov	r18, r26
  bc:	20 95       	com	r18
  be:	23 23       	and	r18, r19
  c0:	db 01       	movw	r26, r22
  c2:	2c 93       	st	X, r18
	*(button->port)|=(1<<button->pin_num);
  c4:	a2 81       	ldd	r26, Z+2	; 0x02
  c6:	b3 81       	ldd	r27, Z+3	; 0x03
  c8:	2c 91       	ld	r18, X
  ca:	06 80       	ldd	r0, Z+6	; 0x06
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <button_ini+0x42>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <button_ini+0x3e>
  d6:	82 2b       	or	r24, r18
  d8:	8c 93       	st	X, r24
	button->polling_time = 0;
  da:	10 86       	std	Z+8, r1	; 0x08
  dc:	17 82       	std	Z+7, r1	; 0x07
	button->old_state = 0;
  de:	11 86       	std	Z+9, r1	; 0x09
	button->new_state = 0;
  e0:	12 86       	std	Z+10, r1	; 0x0a
	button->state = OFF;
  e2:	13 86       	std	Z+11, r1	; 0x0b
  e4:	08 95       	ret

000000e6 <button_press>:
}


void button_press(Button_typedef *button){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
	if(delay_left(button->polling_time) == 0){
  ec:	8f 81       	ldd	r24, Y+7	; 0x07
  ee:	98 85       	ldd	r25, Y+8	; 0x08
  f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <delay_left>
  f4:	89 2b       	or	r24, r25
  f6:	79 f5       	brne	.+94     	; 0x156 <button_press+0x70>
		button->new_state = *(button->pin);
  f8:	ec 81       	ldd	r30, Y+4	; 0x04
  fa:	fd 81       	ldd	r31, Y+5	; 0x05
  fc:	40 81       	ld	r20, Z
  fe:	4a 87       	std	Y+10, r20	; 0x0a
		if(button->new_state != button->old_state && (*(button->pin)&(1<<button->pin_num)) == 0){
 100:	89 85       	ldd	r24, Y+9	; 0x09
 102:	48 17       	cp	r20, r24
 104:	89 f0       	breq	.+34     	; 0x128 <button_press+0x42>
 106:	80 81       	ld	r24, Z
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 80       	ldd	r0, Y+6	; 0x06
 10c:	02 c0       	rjmp	.+4      	; 0x112 <button_press+0x2c>
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <button_press+0x28>
 116:	80 fd       	sbrc	r24, 0
 118:	07 c0       	rjmp	.+14     	; 0x128 <button_press+0x42>
			button->old_state = button->new_state;
 11a:	49 87       	std	Y+9, r20	; 0x09
			PORTD^=(1<<0);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	89 27       	eor	r24, r25
 122:	8b b9       	out	0x0b, r24	; 11
			button->state = ON;
 124:	9b 87       	std	Y+11, r25	; 0x0b
 126:	12 c0       	rjmp	.+36     	; 0x14c <button_press+0x66>
		}
		else if((*(button->pin)&(1<<button->pin_num)) == 1){
 128:	50 81       	ld	r21, Z
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9c 01       	movw	r18, r24
 130:	0e 80       	ldd	r0, Y+6	; 0x06
 132:	02 c0       	rjmp	.+4      	; 0x138 <button_press+0x52>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <button_press+0x4e>
 13c:	85 2f       	mov	r24, r21
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	82 23       	and	r24, r18
 142:	93 23       	and	r25, r19
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	11 f4       	brne	.+4      	; 0x14c <button_press+0x66>
			button->old_state = button->new_state;
 148:	49 87       	std	Y+9, r20	; 0x09
			button->state = OFF;
 14a:	1b 86       	std	Y+11, r1	; 0x0b
		}
	button->polling_time += 30;
 14c:	8f 81       	ldd	r24, Y+7	; 0x07
 14e:	98 85       	ldd	r25, Y+8	; 0x08
 150:	4e 96       	adiw	r24, 0x1e	; 30
 152:	98 87       	std	Y+8, r25	; 0x08
 154:	8f 83       	std	Y+7, r24	; 0x07
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <main>:
#include "tim0.h"
#include "button.h"


int main(void)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	2c 97       	sbiw	r28, 0x0c	; 12
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
	DDRD|=(1<<0)|(1<<1);
 170:	8a b1       	in	r24, 0x0a	; 10
 172:	83 60       	ori	r24, 0x03	; 3
 174:	8a b9       	out	0x0a, r24	; 10
	PORTD&=~((1<<0)|(1<<1));	
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	8c 7f       	andi	r24, 0xFC	; 252
 17a:	8b b9       	out	0x0b, r24	; 11
	tim0_ini();
 17c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <tim0_ini>
	sei();
 180:	78 94       	sei
	
	Button_typedef button2;
//	button_ini(&button1,B,0);
	button_ini(&button2,B,1);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	64 e2       	ldi	r22, 0x24	; 36
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	0e 94 48 00 	call	0x90	; 0x90 <button_ini>
	
	/* Replace with your application code */
    while (1) 
    {
//	button_press(&button1);
	button_press(&button2);
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	0e 94 73 00 	call	0xe6	; 0xe6 <button_press>
 198:	fb cf       	rjmp	.-10     	; 0x190 <main+0x34>

0000019a <__vector_14>:
#include "tim0.h"

static volatile int16_t curent_time = 0;

ISR(TIMER0_COMPA_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
	curent_time++;
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR0A += 249;
 1ba:	87 b5       	in	r24, 0x27	; 39
 1bc:	87 50       	subi	r24, 0x07	; 7
 1be:	87 bd       	out	0x27, r24	; 39
}
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <tim0_ini>:

void tim0_ini(void){
	TCCR0B|= (0<<CS02)|(1<<CS01)|(1<<CS00);
 1ce:	85 b5       	in	r24, 0x25	; 37
 1d0:	83 60       	ori	r24, 0x03	; 3
 1d2:	85 bd       	out	0x25, r24	; 37
	TIMSK0|= (0<<OCIE0B)|(1<<OCIE0A)|(0<<TOIE0);
 1d4:	ee e6       	ldi	r30, 0x6E	; 110
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <delay_left>:
}

int16_t delay_left(int16_t delay){
	return (curent_time-delay);
 1e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	a9 01       	movw	r20, r18
 1ea:	48 1b       	sub	r20, r24
 1ec:	59 0b       	sbc	r21, r25
 1ee:	ca 01       	movw	r24, r20
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
