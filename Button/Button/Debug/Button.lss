
Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6b  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085e  00000000  00000000  00000fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000539  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000440  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000150  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 01 01 	call	0x202	; 0x202 <main>
  88:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <button_ini>:
#include "btn_enc.h"

void button_ini(Button_typedef *butn, volatile uint8_t *ddr, uint8_t pin){
  90:	fc 01       	movw	r30, r24
	butn->ddr = ddr;
  92:	71 83       	std	Z+1, r23	; 0x01
  94:	60 83       	st	Z, r22
	butn->port = ddr + 1;
  96:	cb 01       	movw	r24, r22
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	93 83       	std	Z+3, r25	; 0x03
  9c:	82 83       	std	Z+2, r24	; 0x02
	butn->pin = ddr - 1;
  9e:	02 97       	sbiw	r24, 0x02	; 2
  a0:	95 83       	std	Z+5, r25	; 0x05
  a2:	84 83       	std	Z+4, r24	; 0x04
	butn->pin_num = pin;
  a4:	46 83       	std	Z+6, r20	; 0x06
	*(butn->ddr)&=~(1<<butn->pin_num);
  a6:	db 01       	movw	r26, r22
  a8:	3c 91       	ld	r19, X
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	dc 01       	movw	r26, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <button_ini+0x26>
  b2:	aa 0f       	add	r26, r26
  b4:	bb 1f       	adc	r27, r27
  b6:	4a 95       	dec	r20
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <button_ini+0x22>
  ba:	2a 2f       	mov	r18, r26
  bc:	20 95       	com	r18
  be:	23 23       	and	r18, r19
  c0:	db 01       	movw	r26, r22
  c2:	2c 93       	st	X, r18
	*(butn->port)|=(1<<butn->pin_num);
  c4:	a2 81       	ldd	r26, Z+2	; 0x02
  c6:	b3 81       	ldd	r27, Z+3	; 0x03
  c8:	2c 91       	ld	r18, X
  ca:	06 80       	ldd	r0, Z+6	; 0x06
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <button_ini+0x42>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <button_ini+0x3e>
  d6:	82 2b       	or	r24, r18
  d8:	8c 93       	st	X, r24
	butn->polling_rate = 25;
  da:	89 e1       	ldi	r24, 0x19	; 25
  dc:	85 87       	std	Z+13, r24	; 0x0d
	butn->next_polling = 0;	
  de:	14 86       	std	Z+12, r1	; 0x0c
  e0:	13 86       	std	Z+11, r1	; 0x0b
	butn->hold_cnt = 0;
  e2:	12 86       	std	Z+10, r1	; 0x0a
	butn->state = 0;
  e4:	11 86       	std	Z+9, r1	; 0x09
	butn->old_state = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	87 83       	std	Z+7, r24	; 0x07
	butn->new_state = 1;
  ea:	80 87       	std	Z+8, r24	; 0x08
  ec:	08 95       	ret

000000ee <button_state>:
}

void button_state(Button_typedef *butn){
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ec 01       	movw	r28, r24
	if (delay_left(butn->next_polling) == 0){
  f6:	8b 85       	ldd	r24, Y+11	; 0x0b
  f8:	9c 85       	ldd	r25, Y+12	; 0x0c
  fa:	0e 94 47 01 	call	0x28e	; 0x28e <delay_left>
  fe:	89 2b       	or	r24, r25
 100:	09 f0       	breq	.+2      	; 0x104 <button_state+0x16>
 102:	72 c0       	rjmp	.+228    	; 0x1e8 <button_state+0xfa>
	butn->new_state = (*butn->pin >> butn->pin_num)&0x01;
 104:	ec 81       	ldd	r30, Y+4	; 0x04
 106:	fd 81       	ldd	r31, Y+5	; 0x05
 108:	80 81       	ld	r24, Z
 10a:	2e 81       	ldd	r18, Y+6	; 0x06
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <button_state+0x28>
 112:	95 95       	asr	r25
 114:	87 95       	ror	r24
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <button_state+0x24>
 11a:	48 2f       	mov	r20, r24
 11c:	41 70       	andi	r20, 0x01	; 1
 11e:	48 87       	std	Y+8, r20	; 0x08
		if (butn->old_state != butn->new_state && ((*butn->pin >> butn->pin_num)&0x01) == 1){
 120:	3f 81       	ldd	r19, Y+7	; 0x07
 122:	43 17       	cp	r20, r19
 124:	71 f0       	breq	.+28     	; 0x142 <button_state+0x54>
 126:	80 81       	ld	r24, Z
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <button_state+0x44>
 12e:	95 95       	asr	r25
 130:	87 95       	ror	r24
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <button_state+0x40>
 136:	80 ff       	sbrs	r24, 0
 138:	04 c0       	rjmp	.+8      	; 0x142 <button_state+0x54>
			butn->state &= ~((1<<falling_edge)|(1<<on)|(1<<repeat));
 13a:	89 85       	ldd	r24, Y+9	; 0x09
 13c:	8c 7d       	andi	r24, 0xDC	; 220
			butn->state |= (1<<rising_edge);
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	89 87       	std	Y+9, r24	; 0x09
		}
		if (butn->old_state != butn->new_state && ((*butn->pin >> butn->pin_num)&0x01) == 0){
 142:	43 17       	cp	r20, r19
 144:	69 f0       	breq	.+26     	; 0x160 <button_state+0x72>
 146:	80 81       	ld	r24, Z
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <button_state+0x62>
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	2a 95       	dec	r18
 152:	e2 f7       	brpl	.-8      	; 0x14c <button_state+0x5e>
 154:	80 fd       	sbrc	r24, 0
 156:	04 c0       	rjmp	.+8      	; 0x160 <button_state+0x72>
			butn->state &= ~(1<<rising_edge);
 158:	89 85       	ldd	r24, Y+9	; 0x09
 15a:	8b 7f       	andi	r24, 0xFB	; 251
			butn->state |= (1<<falling_edge)|(1<<on)|(1<<short_click);
 15c:	8b 60       	ori	r24, 0x0B	; 11
 15e:	89 87       	std	Y+9, r24	; 0x09
		}
	if (butn->state&(1<<falling_edge)) butn->hold_cnt++;
 160:	19 85       	ldd	r17, Y+9	; 0x09
 162:	11 ff       	sbrs	r17, 1
 164:	04 c0       	rjmp	.+8      	; 0x16e <button_state+0x80>
 166:	8a 85       	ldd	r24, Y+10	; 0x0a
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	8a 87       	std	Y+10, r24	; 0x0a
 16c:	01 c0       	rjmp	.+2      	; 0x170 <button_state+0x82>
	else butn->hold_cnt = 0;
 16e:	1a 86       	std	Y+10, r1	; 0x0a
//------------------------------------------------------------
	if (butn->hold_cnt > HOLD_BUTTON_MS(250) && butn->state&(1<<on)){
 170:	ea 85       	ldd	r30, Y+10	; 0x0a
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	2d 85       	ldd	r18, Y+13	; 0x0d
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	8a ef       	ldi	r24, 0xFA	; 250
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 182:	77 27       	eor	r23, r23
 184:	6e 17       	cp	r22, r30
 186:	7f 07       	cpc	r23, r31
 188:	24 f4       	brge	.+8      	; 0x192 <button_state+0xa4>
 18a:	10 ff       	sbrs	r17, 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <button_state+0xa4>
		butn->state &= ~(1<<short_click);
 18e:	17 7f       	andi	r17, 0xF7	; 247
 190:	19 87       	std	Y+9, r17	; 0x09
	}
//------------------------------------------------------------
	if (butn->hold_cnt > HOLD_BUTTON_MS(500) && butn->hold_cnt < HOLD_BUTTON_MS(1000) && butn->state&(1<<on)){
 192:	84 ef       	ldi	r24, 0xF4	; 244
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	b9 01       	movw	r22, r18
 198:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 19c:	77 27       	eor	r23, r23
 19e:	6e 17       	cp	r22, r30
 1a0:	7f 07       	cpc	r23, r31
 1a2:	74 f4       	brge	.+28     	; 0x1c0 <button_state+0xd2>
 1a4:	88 ee       	ldi	r24, 0xE8	; 232
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	b9 01       	movw	r22, r18
 1aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 1ae:	77 27       	eor	r23, r23
 1b0:	e6 17       	cp	r30, r22
 1b2:	f7 07       	cpc	r31, r23
 1b4:	2c f4       	brge	.+10     	; 0x1c0 <button_state+0xd2>
 1b6:	89 85       	ldd	r24, Y+9	; 0x09
 1b8:	80 ff       	sbrs	r24, 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <button_state+0xd2>
		butn->state |= (1<<long_click);
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	89 87       	std	Y+9, r24	; 0x09
	}
//------------------------------------------------------------
	if (butn->hold_cnt > HOLD_BUTTON_MS(1000)){
 1c0:	88 ee       	ldi	r24, 0xE8	; 232
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	b9 01       	movw	r22, r18
 1c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 1ca:	77 27       	eor	r23, r23
 1cc:	6e 17       	cp	r22, r30
 1ce:	7f 07       	cpc	r23, r31
 1d0:	24 f4       	brge	.+8      	; 0x1da <button_state+0xec>
		butn->state &= ~(1<<long_click);
 1d2:	89 85       	ldd	r24, Y+9	; 0x09
 1d4:	8f 7e       	andi	r24, 0xEF	; 239
		butn->state |= (1<<repeat);
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	89 87       	std	Y+9, r24	; 0x09
	}
//------------------------------------------------------------	
	butn->old_state = butn->new_state;
 1da:	4f 83       	std	Y+7, r20	; 0x07
	butn->next_polling += butn->polling_rate;
 1dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1de:	9c 85       	ldd	r25, Y+12	; 0x0c
 1e0:	28 0f       	add	r18, r24
 1e2:	39 1f       	adc	r19, r25
 1e4:	3c 87       	std	Y+12, r19	; 0x0c
 1e6:	2b 87       	std	Y+11, r18	; 0x0b
	}
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	08 95       	ret

000001f0 <button_short_click>:

void button_short_click(Button_typedef *butn){
 1f0:	fc 01       	movw	r30, r24
	if(butn->state&(1<<short_click) && butn->state&(1<<rising_edge)){
 1f2:	91 85       	ldd	r25, Z+9	; 0x09
 1f4:	93 ff       	sbrs	r25, 3
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <button_short_click+0x10>
 1f8:	92 ff       	sbrs	r25, 2
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <button_short_click+0x10>
		 // do some thing
		butn->state &= ~(1<<short_click);
 1fc:	97 7f       	andi	r25, 0xF7	; 247
 1fe:	91 87       	std	Z+9, r25	; 0x09
 200:	08 95       	ret

00000202 <main>:
#include "main.h"
#include "tim0.h"
#include "btn_enc.h"

int main(void)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	2e 97       	sbiw	r28, 0x0e	; 14
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
	DDRD|=(1<<0)|(1<<1)|(1<<2);
 216:	8a b1       	in	r24, 0x0a	; 10
 218:	87 60       	ori	r24, 0x07	; 7
 21a:	8a b9       	out	0x0a, r24	; 10
	PORTD&=~((1<<0)|(1<<1)|(1<<2));
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	8b b9       	out	0x0b, r24	; 11
	tim0_ini();
 222:	0e 94 3e 01 	call	0x27c	; 0x27c <tim0_ini>
	sei();
 226:	78 94       	sei
	Button_typedef button1;
	button_ini(&button1, B, 1);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	64 e2       	ldi	r22, 0x24	; 36
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	ce 01       	movw	r24, r28
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	0e 94 48 00 	call	0x90	; 0x90 <button_ini>
	
	while (1) 
    {
    button_state(&button1);
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	0e 94 77 00 	call	0xee	; 0xee <button_state>
	button_short_click(&button1);
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <button_short_click>
 246:	f7 cf       	rjmp	.-18     	; 0x236 <main+0x34>

00000248 <__vector_14>:
#include "tim0.h"

static volatile int16_t compare_cnt = 0;

ISR(TIMER0_COMPA_vect){
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
	compare_cnt++;
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 264:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR0A += 249;
 268:	87 b5       	in	r24, 0x27	; 39
 26a:	87 50       	subi	r24, 0x07	; 7
 26c:	87 bd       	out	0x27, r24	; 39
}
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <tim0_ini>:

void tim0_ini(void){
	TCCR0B|= (0<<CS02)|(1<<CS01)|(1<<CS00);
 27c:	85 b5       	in	r24, 0x25	; 37
 27e:	83 60       	ori	r24, 0x03	; 3
 280:	85 bd       	out	0x25, r24	; 37
	TIMSK0|= (0<<OCIE0B)|(1<<OCIE0A)|(0<<TOIE0);
 282:	ee e6       	ldi	r30, 0x6E	; 110
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	80 83       	st	Z, r24
 28c:	08 95       	ret

0000028e <delay_left>:
}

int16_t delay_left(int16_t delay){
	return (compare_cnt-delay);
 28e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 296:	a9 01       	movw	r20, r18
 298:	48 1b       	sub	r20, r24
 29a:	59 0b       	sbc	r21, r25
 29c:	ca 01       	movw	r24, r20
 29e:	08 95       	ret

000002a0 <__divmodhi4>:
 2a0:	97 fb       	bst	r25, 7
 2a2:	07 2e       	mov	r0, r23
 2a4:	16 f4       	brtc	.+4      	; 0x2aa <__divmodhi4+0xa>
 2a6:	00 94       	com	r0
 2a8:	07 d0       	rcall	.+14     	; 0x2b8 <__divmodhi4_neg1>
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	09 d0       	rcall	.+18     	; 0x2c0 <__divmodhi4_neg2>
 2ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodhi4>
 2b2:	07 fc       	sbrc	r0, 7
 2b4:	05 d0       	rcall	.+10     	; 0x2c0 <__divmodhi4_neg2>
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__divmodhi4_exit>

000002b8 <__divmodhi4_neg1>:
 2b8:	90 95       	com	r25
 2ba:	81 95       	neg	r24
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	08 95       	ret

000002c0 <__divmodhi4_neg2>:
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255

000002c6 <__divmodhi4_exit>:
 2c6:	08 95       	ret

000002c8 <__udivmodhi4>:
 2c8:	aa 1b       	sub	r26, r26
 2ca:	bb 1b       	sub	r27, r27
 2cc:	51 e1       	ldi	r21, 0x11	; 17
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <__udivmodhi4_ep>

000002d0 <__udivmodhi4_loop>:
 2d0:	aa 1f       	adc	r26, r26
 2d2:	bb 1f       	adc	r27, r27
 2d4:	a6 17       	cp	r26, r22
 2d6:	b7 07       	cpc	r27, r23
 2d8:	10 f0       	brcs	.+4      	; 0x2de <__udivmodhi4_ep>
 2da:	a6 1b       	sub	r26, r22
 2dc:	b7 0b       	sbc	r27, r23

000002de <__udivmodhi4_ep>:
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	5a 95       	dec	r21
 2e4:	a9 f7       	brne	.-22     	; 0x2d0 <__udivmodhi4_loop>
 2e6:	80 95       	com	r24
 2e8:	90 95       	com	r25
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
